# Makefile for UNIX 

# the compiler: gcc for C program, define as g++ for C++ 
CC = gcc 

# the static library archiver 
AR = ar rcs 

# compiler flags: 
# -g enable debugging 
# -Wall turn on all warnings 
# -D__USE_FIXED_PROTOTYPES__ force the compiler to use the correct headers 
# -ansi donâ€™t use GNU extensions, stick to ANSI 
# -std=c99 use newer version 
CFLAGS=-g -Wall -D__USE_FIXED_PROTOTYPES__ -std=c99 

# Makefile SOURCE DIRECTORY
MAKE_SOURCE_DIR:=$(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))

#libraries 
#custom
COMPARERS_LIB_DIR=../comparers/outputs/debug/lib
COMPARERS_STATIC_LIB_PATH=$(COMPARERS_LIB_DIR)/libcomparers.a

# include directories
INCLUDE_DIRS= ./include ../comparers/include
CFLAGS+= $(foreach d, $(INCLUDE_DIRS), -I$d)

# the build target executable: 
TARGET = unit_tests
LIBRARY = libunit_tests.a
SHARED_LIBRARY = libunit_tests.so

# on macOS build .dylib shared library
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Darwin)
	DYNAMIC_LIBRARY= libunit_tests.dylib
else 
	DYNAMIC_LIBRARY=
endif

# outputs directories
OUTPUTS_DIR = outputs/debug
OUTPUTS_LIB_DIR = $(OUTPUTS_DIR)/lib
OUTPUTS_BIN_DIR = $(OUTPUTS_DIR)/bin

all: directories libraries $(TARGET)

# make outputs directories
directories: 
	@mkdir -p $(OUTPUTS_DIR)
	@mkdir -p $(OUTPUTS_LIB_DIR)
	@mkdir -p $(OUTPUTS_BIN_DIR)

libraries: $(LIBRARY) $(SHARED_LIBRARY) $(DYNAMIC_LIBRARY)

$(TARGET): $(LIBRARY)
	$(CC) $(CFLAGS) -o $(OUTPUTS_BIN_DIR)/$(TARGET) src/main.c $(OUTPUTS_LIB_DIR)/$(LIBRARY) $(COMPARERS_STATIC_LIB_PATH)

$(SHARED_LIBRARY): assertion.o
	$(CC) $(CFLAGS) -L$(COMPARERS_LIB_DIR) -shared -o $(OUTPUTS_LIB_DIR)/$(SHARED_LIBRARY) $(OUTPUTS_DIR)/assertion.o -lcomparers

$(DYNAMIC_LIBRARY): assertion.o
	$(CC) $(CFLAGS) -L$(COMPARERS_LIB_DIR) -dynamiclib -o $(OUTPUTS_LIB_DIR)/$(DYNAMIC_LIBRARY) $(OUTPUTS_DIR)/assertion.o -lcomparers

$(LIBRARY): assertion.o
	$(AR) $(OUTPUTS_LIB_DIR)/$(LIBRARY) $(OUTPUTS_DIR)/assertion.o

assertion.o: src/test/assertion.c include/test/assertion.h include/common/terminal.h
	$(CC) $(CFLAGS) -c src/test/assertion.c -o $(OUTPUTS_DIR)/assertion.o

clean: 
	$(RM) -rf $(OUTPUTS_DIR)